console.log('Server loaded.');var STORE_SAVE_INTERVAL = 1000 * 60 * 60 * 24; // 1dvar MSG_PUBLISH_SUCCESS = 'Coup style published!';var MSG_MESSAGE_SUCCESS = 'Message posted!';var MSG_SVSTORE_SUCCESS = 'Store saved!';var http = require('http');var qs   = require('querystring');var url  = require('url');var fs   = require('fs');var rl   = require('readline');var store = {    messages: {}};process.chdir('c:\\server\\gm\\cdb\\app');if (fs.existsSync('store.json')) {	store = JSON.parse(fs.readFileSync('store.json', 'utf8'));	console.log('Store loaded.');}store.messages = store.messages || {};if (process.platform === 'win32') {	var rli = rl.createInterface({		input: process.stdin,        output: process.stdout    });    rli.on ('SIGINT', function() {        process.emit('SIGINT');    });	console.log('Signal hooked.');}process.on('SIGINT', function() {	console.log('Signal received.');	fs.writeFileSync('store.json', JSON.stringify(store), 'utf8');	process.exit();});setInterval(function() {	fs.writeFile('store.json', JSON.stringify(store), function(err) {});}, STORE_SAVE_INTERVAL);http.createServer(function (req, res) {	console.log('Request received.');	var urlp = url.parse(req.url, true);	var query = urlp.query;	var version = query.v;	var path = urlp.pathname;	var response = {status: 200, version: '6.1', message: null};		switch (path) {	// general cases		case '//get':			if (query.uids) {				response.users = {};				var requestedUsers = query.uids.split(',');				for (var i in requestedUsers) {					var uid = requestedUsers[i];					if (store[uid]) {						response.users[uid] = store[uid];					}				}			}			end();			break;		case '//set':			if (req.method === 'POST') {				var chunks = [];				req.on('data', function(chunk) {					chunks.push(chunk);				});				req.on('end', function() {					var pd = qs.parse(chunks.join('').toString());					if (pd.uid) {						store[pd.uid] = {							avatar: pd.avatar,							nameColor: pd.nameColor,							title: pd.title,							titleColor: pd.titleColor,							titleBgColor: pd.titleBgColor,							titleBdColor: pd.titleBdColor						};					}					response.message = MSG_PUBLISH_SUCCESS;					end();				});			}			break;        case '//get/messages':            if (query.uids) {                response.messages = {};				var requestedUsers = query.uids.split(',');				for (var i in requestedUsers) {					var uid = requestedUsers[i];					if (store.messages[uid]) {						response.messages[uid] = store.messages[uid];					}				}            }            end();            break;        case '//post/message':            // {to, from, message}            if (req.method === 'POST') {                var chunks = [];                req.on('data', function(chunk) {                    chunks.push(chunk);                });                req.on('end', function() {                    var pd = qs.parse(chunks.join('').toString());                    if (pd.to) {                        if (!store.messages[pd.to]) {                            store.messages[pd.to] = [];                        }                        store.messages[pd.to].unshift({                            from: pd.from,                            timestamp: Date.now(),                            message: pd.message                        });                        store.messages[pd.to] = store.messages[pd.to].slice(0, 10);                    }                    response.message = MSG_MESSAGE_SUCCESS;                    end();                });            }            break;	// hacky admin controls		case '//admin_store':			res.end(JSON.stringify(store, null, 2));			return;        case '//admin_save':            fs.writeFile('store.json', JSON.stringify(store), function(err) {});            response.message = MSG_SVSTORE_SUCCESS;            end();            break;        case '//dashboard':            end({                status: 401,                content: 'Not Authorized'            });            break;            	}		function end(details) {		res.writeHead(details && details.status || 200, {'Access-Control-Allow-Origin': '*'});        if (details && details.content) res.write(details.content);        else res.write(JSON.stringify(response));		res.end();	}}).listen(1337, '127.0.0.1');console.log('Server started.');